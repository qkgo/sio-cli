name: Release

on:
  push:
    tags:
      - '*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        # toolchain: stable
        toolchain: 1.69.0
        override: true

    - name: Install OpenSSL static libraries
      run: sudo apt-get install -y libssl-dev

    - name: Build release
      run: OPENSSL_STATIC=1 cargo build --release

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.GITHUB_REF_SLUG }}
        release_name: Release ${{ env.GITHUB_REF_SLUG }}
        draft: false
        prerelease: false

# https://docs.github.com/en/actions/migrating-to-github-actions/automated-migrations/migrating-from-gitlab-with-github-actions-importer
    - name: Upload build artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        upload_url: ${{ steps.create_release.outputs.result }}
        asset_path: ./target/release/rust_socketio_cli
        asset_name: rust_socketio_cli_${{ env.GITHUB_REF_SLUG }}
        asset_content_type: application/octet-stream


    - name: Check existing release
      id: check_release
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          return;
          const { owner, repo } = context.repo;
          const tag = context.ref.slice(10);
          let release = null;
          try {
            release = await github.repos.getReleaseByTag({
              owner,
              repo,
              tag,
            });
          } catch (error) {
            if (error.status !== 404) {
              throw error;
            }
          }
          if (!release) {
            release = await github.repos.createRelease({
              owner,
              repo,
              tag_name: tag,
              name: "Release " + tag,
              draft: false,
              prerelease: false,
            });
          }
          return release.data.upload_url;
